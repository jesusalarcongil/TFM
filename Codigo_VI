library(SummarizedExperiment)
library(DESeq2)
library(vsn)
library(fission)
library(pheatmap)
library(RColorBrewer)
library(PoiClaClu)
library(glmpca)
library(ggplot2)
library(genefilter)
library(magrittr)

# Importación de los datos a analizar y de los datos de las muestras
isomirData = read.delim("D:/TFM/Resultados/results/variantes.txt", row.names=1)
samplesData = read.delim("D:/TFM/Resultados/results/samplesData.txt", row.names=1)
samplesData$stage = factor(samplesData$stage)

# Eliminar los precursores y los loop
rows2remove = c()
for (i in 1:1:nrow(isomirData)){
  if (grepl(c("pri-moR"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
  }
  if (grepl(c("pri-loop"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
  }
  if (grepl(c("new-loop"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
  }
  if (grepl(c("exact"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
  }
  if (grepl(c("putative_new-miR"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
  }
  if (grepl(c("putative_new-moR"), rownames(isomirData[i,])) == TRUE){
    rows2remove = c(rows2remove, i)
}}
isomirData = isomirData[-rows2remove,]

# Creación del objeto DESeq
dataStage = DESeqDataSetFromMatrix(countData = isomirData, 
                                                                colData = samplesData, design = ~ stage)

# Filtrado de las muestras
message("El número original es ", nrow(dataStage))
filtroCount = rowSums(counts(dataStage)) > 220
dataStage = dataStage[filtroCount,]
message("El número original es ", nrow(dataStage))

# Transformación de los resultados para su visualización
dataStage = estimateSizeFactors(dataStage)
nanotaciones = sum(rowMeans(counts(dataStage, normalized=TRUE)) > 5)
dataStageT = vst(dataStage, blind = FALSE, nsub = nanotaciones)

# Obtención del gráfico de distancias, heatmap por clusteres y de PCA
genesHM = head(order(rowVars(assay(dataStageT)), decreasing = TRUE),nanotaciones)
dataHM  = assay(dataStageT)[genesHM,]
dataHM  = dataHM - rowMeans(dataHM)
tiff("D:/Resultados/heatmap_isomirs_distancias.tiff", width = 8, height = 4, units = 'in', res = 4000)
pheatmap(dataHM, cutree_cols = 6, fontsize_row =0.15,  fontsize_col =8)
dev.off()
tiff("D:/Resultados/heatmap_isomirs_clusteres.tiff", width = 8, height = 4, units = 'in', res = 4000)
pheatmap(dataHM, kmeans_k = 4, cutree_cols = 6, fontsize_row =8, fontsize_col =8)
dev.off()
dataGPCA = glmpca(assay(dataStage),L=4)
dataGPCA.dat = dataGPCA$factors
dataGPCA.dat$stage = dataStage$stage
tiff("D:/Resultados/gpca_isomirs.tiff", width = 8, height = 4, units = 'in', res = 4000)
ggplot(dataGPCA.dat, aes(x = dim1, y = dim2, color = stage)) + geom_point(size =3) + coord_fixed()
dev.off()

# Realizar el análisis de enriquecimiento y obtener las diferencias significativas
samplesGroup = c("NFE", "ED0", "ED1", "ED2", "ED6", "ED13", "N1", "N3", "N5", "N6", "Adult")
analisisStage = DESeq(dataStage)
for (i in 1:1:length(samplesGroup)){
  for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      eval(parse(text=sprintf("resultsStage%s%s = results(analisisStage, contrast = c('stage', '%s', '%s'))", 
                                              samplesGroup[i], samplesGroup[x], samplesGroup[i], samplesGroup[x])))
    }
    else{next()} 
}}

# Obtener el resumen de los datos de significancia
enrT = array(1, dim = c(length(samplesGroup),length(samplesGroup), nrow(dataStage)),
             dimnames = list(samplesGroup, samplesGroup, rownames(dataStage)))
for (i in 1:1:length(samplesGroup)){
  for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      for (z in 1:1:nrow(dataStage)){
        eval(parse(text=sprintf("enrT[samplesGroup[i], samplesGroup[x], rownames(dataStage)[z]] = 
                    resultsStage%s%s[rownames(dataStage)[z],]$padj", samplesGroup[i], samplesGroup[x])))
      }
    }
    else{next()}
}}

# Obtener los elementos significativos
enrTS = array(0, dim = c(length(samplesGroup),length(samplesGroup), nrow(dataStage)),
                       dimnames = list(samplesGroup, samplesGroup, rownames(dataStage)))
for (i in 1:1:length(samplesGroup)){
  for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      for (z in 1:1:nrow(dataStage)){
        eval(parse(text=sprintf("if (is.na(resultsStage%s%s[rownames(dataStage)[z],]$padj)){next()}", 
                                samplesGroup[i], samplesGroup[x])))
        eval(parse(text=sprintf("if(resultsStage%s%s[rownames(dataStage)[z],]$padj<=0.001){enrTS[
samplesGroup[i], samplesGroup[x], rownames(dataStage)[z]] = 1}", samplesGroup[i], samplesGroup[x])))
      }
    }
    else{next()}
}}

sumEnrTS = rowSums(enrTS, dims = 2)
rows2remove = c()
for (i in 1:1:dim(enrTS)[3]){
  total = sum(enrTS[,,1])
  if (total < 11){
    rows2remove = c(rows2remove, i)
  }
}
isomir2analyze = dimnames(enrTS)[[3]]

# Clasificar los isomirs
rows2remove2 = c()
for (i in 1:1:nrow(isomirData)){
  if(sum(isomirData[i,2:22]) < 220){
    rows2remove2 = c(rows2remove2, i)
  }
}
isomirData = isomirData[-rows2remove2,]
rowsMismatch15p = c()
rowsMismatch13p = c()
rowsMismatch1b = c()
rowsMismatch25p = c()
rowsMismatch23p = c()
rowsMismatch2b = c()
rowsSoL5p = c()
rowsSoL3p = c()
rowsSoLb = c()
for (i in 1:1:nrow(isomirData)){
  if (grepl(c("mismatch_1__type_5p"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch15p = c(rowsMismatch15p, i)
  }
  if (grepl(c("mismatch_1__type_3p"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch13p = c(rowsMismatch13p, i)
  }
  if (grepl(c("mismatch_1__type_both"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch1b = c(rowsMismatch1b, i)
  }
  if (grepl(c("mismatch_2__type_5p"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch25p = c(rowsMismatch25p, i)
  }
  if (grepl(c("mismatch_2__type_3p"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch23p = c(rowsMismatch23p, i)
  }
  if (grepl(c("mismatch_2__type_both"), rownames(isomirData[i,])) == TRUE){
    rowsMismatch2b = c(rowsMismatch2b, i)
  }
  if (grepl(c("shorter_or_longer__type_5p"), rownames(isomirData[i,])) == TRUE){
    rowsSoL5p = c(rowsSoL5p, i)
  }
  if (grepl(c("shorter_or_longer__type_3p"), rownames(isomirData[i,])) == TRUE){
    rowsSoL3p = c(rowsSoL3p, i)
  }
  if (grepl(c("shorter_or_longer__type_both"), rownames(isomirData[i,])) == TRUE){
    rowsSoLb = c(rowsSoLb, i)
  }
}

dataMismatch15p = isomirData[rowsMismatch15p,]
dataMismatch13p = isomirData[rowsMismatch13p,]
dataMismatch23p = isomirData[rowsMismatch23p,]
dataSoL5p = isomirData[rowsSoL5p,]
dataSoL3p = isomirData[rowsSoL3p,]
dataSoLb = isomirData[rowsSoLb,]
mismatch1_5p = colSums(dataMismatch15p)
mismatch1_3p = colSums(dataMismatch13p)
mismatch2_3p = colSums(dataMismatch23p)
sol_5p = colSums(dataSoL5p)
sol_3p = colSums(dataSoL3p)
sol_b = colSums(dataSoLb)

typeisomirData = data.frame(rbind(mismatch1_5p, mismatch1_3p, mismatch2_3p, sol_5p, sol_3p, sol_b))

# Creación del objeto DESeq
dataTypeStage = DESeqDataSetFromMatrix(countData = typeisomirData,
                                   colData = samplesData, design = ~ stage)

# Transformación de los resultados para su visualización
dataTypeStage = estimateSizeFactors(dataTypeStage)
nanotacionesType = sum(rowMeans(counts(dataTypeStage, normalized=TRUE)) > 5)
dataTypeStageT = vst(dataTypeStage, blind = TRUE, nsub = nanotacionesType, fitType = "mean")

# Obtención del gráfico de distancias, heatmap por clusteres y de PCA
dataTypeHM  = assay(dataTypeStageT)
dataTypeHM  = dataTypeHM - rowMeans(dataTypeHM)

tiff("D:/Resultados/heatmap_isomirs_type_distancias.tiff", width = 8, height = 4, units = 'in', res = 4000)
pheatmap(dataTypeHM, cutree_cols = 6, fontsize_row =10,  fontsize_col =10)
dev.off()

# Realizar el análisis de enriquecimiento y obtener las diferencias significativas
samplesGroup = c("NFE", "ED0", "ED1", "ED2", "ED6", "ED13", "N1", "N3", "N5", "N6", "Adult")
analisisTypeStage = DESeq(dataTypeStage)
for (i in 1:1:length(samplesGroup)){
  for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      eval(parse(text=sprintf("resultsTypeStage%s%s = results(analisisTypeStage, 
                            contrast = c('stage', '%s', '%s'))", 
                              samplesGroup[i], samplesGroup[x], samplesGroup[i], 
                              samplesGroup[x])))
    }
    else{next()}
}}

# Obtener el resumen de los datos de significancia
enrTT = array(1, dim = c(length(samplesGroup),length(samplesGroup), nrow(dataTypeStage)),
             dimnames = list(samplesGroup, samplesGroup, rownames(dataTypeStage)))
for (i in 1:1:length(samplesGroup)){
  for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      for (z in 1:1:nrow(dataTypeStage)){
        eval(parse(text=sprintf("enrTT[samplesGroup[i], samplesGroup[x], 
                                rownames(dataTypeStage)[z]] = 
                                resultsTypeStage%s%s[rownames(dataTypeStage)[z],]$padj", 
                                samplesGroup[i], samplesGroup[x])))
      }
    }
    else{next()}
}}

# Obtener los elementos significativos
enrTTS = array(0, dim = c(length(samplesGroup),length(samplesGroup), nrow(dataTypeStage)),
              dimnames = list(samplesGroup, samplesGroup, rownames(dataTypeStage)))
for (i in 1:1:length(samplesGroup)){
for (x in 1:1:length(samplesGroup)){
    if (samplesGroup[i] != samplesGroup[x]){
      for (z in 1:1:nrow(dataTypeStage)){
         eval(parse(text=sprintf("if(is.na(resultsTypeStage%s%s[rownames(dataTypeStage)[z],]$padj))
  {next()}", samplesGroup[i], samplesGroup[x])))
               eval(parse(text=sprintf("if (resultsTypeStage%s%s[rownames(dataTypeStage)[z],]$padj<=0.001)
               {enrTTS[samplesGroup[i], samplesGroup[x], rownames(dataTypeStage)[z]] = 1}", 
               samplesGroup[i], samplesGroup[x])))
          }
       }
   else{next()}
   }
}
sumEnrTTS = rowSums(enrTTS, dims = 2)
