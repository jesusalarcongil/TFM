library(Biostrings)
library(pheatmap)
library(grid)
library(viridis)

# Preparar las variables
resultsisomirna2mrna = readRDS("D:/Resultados/isomirna_targets/isomirna_targets.rds")
resultsmirna2mrna = readRDS("D:/Resultados/mirna_targets/mirna_targets.rds")
sequencesMir=read.delim("D:/Resultados/isomirna_targets/isomirna_sequences.csv", header=TRUE)
sequencesMir = sequencesMir[,-1]
mir2analyze = read.delim("D:/Resultados/mirna_targets/mirna_sequences.csv", header=TRUE, sep = ",")
mir2analyze = mir2analyze[,-1]
sequencesDNA = readDNAStringSet(file = "D:/TFM/Datos/dnamensajeros.fasta")

# Filtrar datos
rows2remove = c()
for (i in 1:1:length(resultsisomirna2mrna)){ 
  for (z in 1:1:nrow(resultsisomirna2mrna[[i]])){
    if(resultsisomirna2mrna[[i]][z,5]<3) {rows2remove = c(rows2remove, z)}
  }
  resultsisomirna2mrna[[i]] = resultsisomirna2mrna[[i]][-rows2remove,]
  rows2remove = c()
}

rows2remove = c()
for (i in 1:1:length(resultsisomirna2mrna)){ 
  if (nrow(resultsisomirna2mrna[[i]]) == 0) {rows2remove = c(rows2remove, i)}
}
if (!is.null(rows2remove)) {resultsisomirna2mrna = resultsisomirna2mrna[-rows2remove]}

rows2remove = c()
for (i in 1:1:length(resultsmirna2mrna)){ 
  for (z in 1:1:nrow(resultsmirna2mrna[[i]])){
    if(resultsmirna2mrna[[i]][z,5]<3) {rows2remove = c(rows2remove, z)}
  }
  resultsmirna2mrna[[i]] = resultsmirna2mrna[[i]][-rows2remove,]
  rows2remove = c()
}

rows2remove = c()
for (i in 1:1:length(resultsmirna2mrna)){ 
  if (nrow(resultsmirna2mrna[[i]]) == 0) {rows2remove = c(rows2remove, i)}
}
if (!is.null(rows2remove)){resultsmirna2mrna = resultsmirna2mrna[-rows2remove]}

# Crear tablas resumen
isomirnatotal = sequencesMir[,1]
mirnatotal = mir2analyze[,1]
genestotal = names(sequencesDNA)

tablaisomirnagen = matrix(0, nrow = nrow(sequencesMir), ncol = length(sequencesDNA))
tablamirnagen = matrix(0, nrow = nrow(mir2analyze), ncol = length(sequencesDNA))

rownames(tablaisomirnagen) = isomirnatotal
rownames(tablamirnagen) = mirnatotal
colnames(tablaisomirnagen) = genestotal
colnames(tablamirnagen) = genestotal

tabladiferencias = tablaisomirnagen
tablaresumendiferencias = tablamirnagen
tabladiferenciastipos = matrix(0, nrow = 8, ncol = length(sequencesDNA))
rownames(tabladiferenciastipos) = c("exact", "mismatch_1__type_5p", "mismatch_1__type_3p",
                                    "mismatch_2__type_5p", "mismatch_2__type_3p", "shorter_or_longer__type_both",     
                                "shorter_or_longer__type_3p","shorter_or_longer__type_5p")
colnames(tabladiferenciastipos) = genestotal
# Completar tablas resumen
for (i in 1:length(resultsisomirna2mrna)){
  result_names  = names(resultsisomirna2mrna[i])
  tablaisomirnagen_row = match(result_names, rownames(tablaisomirnagen))
  if (!is.na(tablaisomirnagen_row)) {
    result_data = resultsisomirna2mrna[[i]]
    for (z in 1:nrow(result_data)) {
      result_value = as.character(result_data[z, 1])
      tablaisomirnagen_cols = match(result_value, colnames(tablaisomirnagen))
      if (!is.na(tablaisomirnagen_cols)) {
        tablaisomirnagen[tablaisomirnagen_row, tablaisomirnagen_cols] = as.character(result_data[z, 3])
}}}}

for (i in 1:length(resultsmirna2mrna)){
  result_names = names(resultsmirna2mrna[i])
  tablamirnagen_row = match(result_names, rownames(tablamirnagen))
  if (!is.na(tablamirnagen_row)) {
    result_data = resultsmirna2mrna[[i]]
    for (z in 1:nrow(result_data)) {
      result_value = as.character(result_data[z, 1])
      tablamirnagen_cols = match(result_value, colnames(tablamirnagen))
      if (!is.na(tablamirnagen_cols)) {
        message(i, z)
        tablamirnagen[tablamirnagen_row, tablamirnagen_cols] = as.character(result_data[z, 3])
}}}}

# Crear tabla de diferencias de los targets entre un miRNA y sus isomiRNA
for (i in 1:1:nrow(tabladiferencias)){
  for (z in 1:1:nrow(tablamirnagen)){
    if (grepl(rownames(tablamirnagen)[z], rownames(tabladiferencias)[i]) == TRUE){
      for (y in 1:1:ncol(tabladiferencias)){
        if (tablamirnagen[z,y]==tablaisomirnagen[i,y]){tabladiferencias[i,y] = 0}
        if (tablamirnagen[z,y]!=tablaisomirnagen[i,y]){tabladiferencias[i,y] = 1}
}}}}

# Crear tabla de resumen de las diferencias de los targets entre un miRNA y sus isomiRNA
for (i in 1:1:nrow(tabladiferencias)){
  for (z in 1:1:nrow(tablaresumendiferencias)){
    if (grepl(rownames(tablaresumendiferencias)[z], rownames(tabladiferencias)[i]) == TRUE){
      tablaresumendiferencias[z, ] = tabladiferencias[i, ] + tablaresumendiferencias[z, ]
}}}

varFuncional = rowSums(tablaresumendiferencias)
rows2remove = c()
for (i in 1:1:length(varFuncional)){
  if (varFuncional[i] == 0){
    rows2remove = c(rows2remove, i)
  }
}
tablaresumendiferencias = tablaresumendiferencias[-rows2remove, ]

tiff("D:/Resultados/heatmap_mirs_dif_isomirs_targets.tiff", width = 8, height = 4, units = 'in', res = 4000)
grid.newpage()
lienzo = viewport(x=8.5,y=4.25,width=8, height=4, just = c("center", "center"))
pushViewport(lienzo)
heatmap_mirisomirdif = pheatmap(tablaresumendiferencias, fontsize_row = 2, breaks = 0:14, show_colnames = FALSE, scale = "column", treeheight_row = 0, treeheight_col = 0, color = viridis(14))
grid.text("mRNA", y=-0.05, x = 0.5, gp=gpar(fontsize=12))
grid.text("diferencias entre mirNA e isomiRs targets", rot = 90, x=-0.05, gp=gpar(fontsize=12))
dev.off()

# Crear tabla de resumen de diferencias de targets entre un miRNA y sus isomiRNA por categorias
for (i in 1:1:nrow(tabladiferencias)){
  for (z in 1:1:nrow(tabladiferenciastipos)){
    if (grepl(rownames(tabladiferenciastipos)[z], rownames(tabladiferencias)[i]) == TRUE){
      tabladiferenciastipos[z, ] = tabladiferencias[i, ] + tabladiferenciastipos[z, ]
}}}
vartiposFuncional = rowSums(tabladiferenciastipos)
rows2remove = c()
if (!is.null(rows2remove)){
  for (i in 1:1:length(vartiposFuncional)) {
    if (vartiposFuncional[i] == 0) {
      rows2remove = c(rows2remove, i)
  }}
tabladiferenciastipos = tabladiferenciastipos[-rows2remove, ]
}

genTiposFuncional = colSums(tabladiferenciastipos)
cols2remove = c()
if (!is.null(rows2remove)){
  for (i in 1:1:length(genTiposFuncional)){
    if (genTiposFuncional[i] == 0){
      cols2remove = c(cols2remove, i)
  }}
tabladiferenciastipos = tabladiferenciastipos[, -cols2remove]
}

tiff("D:/Resultados/heatmap_tipos_mirs_dif_isomirs_targets.tiff", width=8, height=4, units='in', res = 4000)
grid.newpage()
lienzo = viewport(x=8.5,y=4.25,width=8, height=4, just = c("center", "center"))
pushViewport(lienzo)
heatmap_tipos =  pheatmap(tabladiferenciastipos, fontsize_row = 10, show_colnames = FALSE, scale = "column", treeheight_row = 0, treeheight_col = 0, color = viridis(30))
grid.text("mRNA", y=-0.05, x = 0.3, gp=gpar(fontsize=12))
grid.text("diferencias entre mirNA e isomiRs targets por tipos", rot = 90, x=-0.05, gp=gpar(fontsize=12))
dev.off()

# Crear tablas de cuentas sobre los genes para los isomirs y los mirs, asÃ­ como combinado
samplesNames = colnames(mirData)
tablacuentasisomirnagen = array(0, dim = c(length(sequencesDNA), length(samplesNames)))
tablacuentasmirnagen = array(0, dim = c(length(sequencesDNA), length(samplesNames)))

dimnames(tablacuentasisomirnagen) = list(genestotal, samplesNames)
dimnames(tablacuentasmirnagen) = list(genestotal, samplesNames)

for (x in 1:1:nrow(isomirData)) {rownames(isomirData)[x] = gsub("\\*","", rownames(isomirData)[x])}

for (i in 1:dim(tablacuentasisomirnagen)[1]){
  genDim = dimnames(tablacuentasisomirnagen)[[1]][i]
  genCol = match(genDim, colnames(tablaisomirnagen))
  for (a in 1:dim(tablacuentasisomirnagen)[2]){
    sampleDim = dimnames(tablacuentasisomirnagen)[[2]][a]
    sampleCol = match(sampleDim, colnames(isomirData))
    for (z in 1:nrow(tablaisomirnagen)){
      mirDim = dimnames(tablaisomirnagen)[[1]][z]
      mirCol = match(mirDim, rownames(isomirData))
      if (tablaisomirnagen[z, genCol] != 0){
        tablacuentasisomirnagen[i,a] = tablacuentasisomirnagen[i,a] + isomirData[mirCol, sampleCol]
}}}}

for (i in 1:dim(tablacuentasmirnagen)[1]){
  genDim = dimnames(tablacuentasmirnagen)[[1]][i]
  genCol = match(genDim, colnames(tablamirnagen))
  for (a in 1:dim(tablacuentasmirnagen)[2]){
    sampleDim = dimnames(tablacuentasmirnagen)[[2]][a]
    sampleCol = match(sampleDim, colnames(mirData))
    for (z in 1:nrow(tablamirnagen)){
      mirDim = dimnames(tablamirnagen)[[1]][z]
      mirCol = match(mirDim, rownames(mirData))
      if (tablamirnagen[z, genCol] != 0){
        tablacuentasmirnagen[i,a] = tablacuentasmirnagen[i,a] + mirData[mirCol, sampleCol]
}}}}
tablacuentastotal = tablacuentasisomirnagen + tablacuentasmirnagen
